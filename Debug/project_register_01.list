
project_register_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cdc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e0c  08000e0c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e0c  08000e0c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08000e0c  08000e0c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e0c  08000e0c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e0c  08000e0c  00010e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e10  08000e10  00010e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08000e14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000010  08000e24  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08000e24  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000132e  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000079a  00000000  00000000  00021367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000178  00000000  00000000  00021b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000100  00000000  00000000  00021c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002378  00000000  00000000  00021d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000012a1  00000000  00000000  000240f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008c36  00000000  00000000  00025399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002dfcf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000044c  00000000  00000000  0002e020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000010 	.word	0x20000010
 800014c:	00000000 	.word	0x00000000
 8000150:	08000df4 	.word	0x08000df4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000014 	.word	0x20000014
 800016c:	08000df4 	.word	0x08000df4

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	; 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003de:	2afd      	cmp	r2, #253	; 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	; 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	; 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	; 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__aeabi_f2uiz>:
 800062c:	0042      	lsls	r2, r0, #1
 800062e:	d20e      	bcs.n	800064e <__aeabi_f2uiz+0x22>
 8000630:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000634:	d30b      	bcc.n	800064e <__aeabi_f2uiz+0x22>
 8000636:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800063a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800063e:	d409      	bmi.n	8000654 <__aeabi_f2uiz+0x28>
 8000640:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000644:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000648:	fa23 f002 	lsr.w	r0, r3, r2
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr
 8000654:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000658:	d101      	bne.n	800065e <__aeabi_f2uiz+0x32>
 800065a:	0242      	lsls	r2, r0, #9
 800065c:	d102      	bne.n	8000664 <__aeabi_f2uiz+0x38>
 800065e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000662:	4770      	bx	lr
 8000664:	f04f 0000 	mov.w	r0, #0
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop

0800066c <delay_init>:
#endif
			   


void delay_init(u8 SYSCLK)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
#if SYSTEM_SUPPORT_OS
	u32 reload;
#endif
 	SysTick->CTRL&=~(1<<2);
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <delay_init+0x44>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <delay_init+0x44>)
 800067c:	f023 0304 	bic.w	r3, r3, #4
 8000680:	6013      	str	r3, [r2, #0]
	fac_us=SYSCLK/8;
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	08db      	lsrs	r3, r3, #3
 8000686:	b2da      	uxtb	r2, r3
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <delay_init+0x48>)
 800068a:	701a      	strb	r2, [r3, #0]
	fac_ms=1000/delay_ostickspersec;
	SysTick->CTRL|=1<<1;
	SysTick->LOAD=reload;
	SysTick->CTRL|=1<<0;
#else
	fac_ms=(u16)fac_us*1000;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <delay_init+0x48>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	b29b      	uxth	r3, r3
 8000692:	461a      	mov	r2, r3
 8000694:	0152      	lsls	r2, r2, #5
 8000696:	1ad2      	subs	r2, r2, r3
 8000698:	0092      	lsls	r2, r2, #2
 800069a:	4413      	add	r3, r2
 800069c:	00db      	lsls	r3, r3, #3
 800069e:	b29a      	uxth	r2, r3
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <delay_init+0x4c>)
 80006a2:	801a      	strh	r2, [r3, #0]
#endif
}								    
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	e000e010 	.word	0xe000e010
 80006b4:	2000002c 	.word	0x2000002c
 80006b8:	2000002e 	.word	0x2000002e

080006bc <delay_ms>:
	SysTick->VAL =0X00;
}


void delay_ms(u16 nms)
{	 		  	  
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	80fb      	strh	r3, [r7, #6]
	u32 temp;		   
	SysTick->LOAD=(u32)nms*fac_ms;
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	4a12      	ldr	r2, [pc, #72]	; (8000714 <delay_ms+0x58>)
 80006ca:	8812      	ldrh	r2, [r2, #0]
 80006cc:	4611      	mov	r1, r2
 80006ce:	4a12      	ldr	r2, [pc, #72]	; (8000718 <delay_ms+0x5c>)
 80006d0:	fb01 f303 	mul.w	r3, r1, r3
 80006d4:	6053      	str	r3, [r2, #4]
	SysTick->VAL =0x00;
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <delay_ms+0x5c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
	SysTick->CTRL=0x01 ;
 80006dc:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <delay_ms+0x5c>)
 80006de:	2201      	movs	r2, #1
 80006e0:	601a      	str	r2, [r3, #0]
	do
	{
		temp=SysTick->CTRL;
 80006e2:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <delay_ms+0x5c>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	60fb      	str	r3, [r7, #12]
	}while((temp&0x01)&&!(temp&(1<<16)));
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d004      	beq.n	80006fc <delay_ms+0x40>
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d0f2      	beq.n	80006e2 <delay_ms+0x26>
	SysTick->CTRL=0x00;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <delay_ms+0x5c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;
 8000702:	4b05      	ldr	r3, [pc, #20]	; (8000718 <delay_ms+0x5c>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
} 
 8000708:	bf00      	nop
 800070a:	3714      	adds	r7, #20
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	2000002e 	.word	0x2000002e
 8000718:	e000e010 	.word	0xe000e010

0800071c <KEY_Scan>:
//KEY0_PRES，KEY0按下
//KEY1_PRES，KEY1按下
//WKUP_PRES，WK_UP按下
//注意此函数有响应优先级,KEY0>KEY1>WK_UP!!
u8 KEY_Scan(u8 mode)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
	static u8 key_up=1;//按键按松开标志
	if(mode)key_up=1;  //支持连按
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d002      	beq.n	8000732 <KEY_Scan+0x16>
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <KEY_Scan+0x58>)
 800072e:	2201      	movs	r2, #1
 8000730:	701a      	strb	r2, [r3, #0]
	if(key_up&&(KEY1==0))
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <KEY_Scan+0x58>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d00f      	beq.n	800075a <KEY_Scan+0x3e>
 800073a:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <KEY_Scan+0x5c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d10b      	bne.n	800075a <KEY_Scan+0x3e>
	{
		delay_ms(10);//去抖动
 8000742:	200a      	movs	r0, #10
 8000744:	f7ff ffba 	bl	80006bc <delay_ms>
		key_up=0;
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <KEY_Scan+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
		if(KEY1==0)return KEY1_PRES;
 800074e:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <KEY_Scan+0x5c>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d108      	bne.n	8000768 <KEY_Scan+0x4c>
 8000756:	2302      	movs	r3, #2
 8000758:	e007      	b.n	800076a <KEY_Scan+0x4e>
	}else if(KEY1==1)key_up=1;
 800075a:	4b07      	ldr	r3, [pc, #28]	; (8000778 <KEY_Scan+0x5c>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2b01      	cmp	r3, #1
 8000760:	d102      	bne.n	8000768 <KEY_Scan+0x4c>
 8000762:	4b04      	ldr	r3, [pc, #16]	; (8000774 <KEY_Scan+0x58>)
 8000764:	2201      	movs	r2, #1
 8000766:	701a      	strb	r2, [r3, #0]
	return 0;// 无按键按下
 8000768:	2300      	movs	r3, #0
}
 800076a:	4618      	mov	r0, r3
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000000 	.word	0x20000000
 8000778:	42210120 	.word	0x42210120

0800077c <LED_init>:
#include"stm32f10x.h"
#include"stm32f10x_gpio.h"
#include "delay.h"

void LED_init()
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
	RCC->APB2ENR |=(1<<2);				//使能PORTA时钟
 8000780:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <LED_init+0x48>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <LED_init+0x48>)
 8000786:	f043 0304 	orr.w	r3, r3, #4
 800078a:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= ~(0x0F<<(4*1));
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <LED_init+0x4c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a0d      	ldr	r2, [pc, #52]	; (80007c8 <LED_init+0x4c>)
 8000792:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000796:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (3<<(4*1));
 8000798:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <LED_init+0x4c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <LED_init+0x4c>)
 800079e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80007a2:	6013      	str	r3, [r2, #0]
	GPIOA->BSRR |= (1<<1);				//将第1位(bit)设置为1，设置为高电平，GPIO_SetBits
 80007a4:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <LED_init+0x4c>)
 80007a6:	691b      	ldr	r3, [r3, #16]
 80007a8:	4a07      	ldr	r2, [pc, #28]	; (80007c8 <LED_init+0x4c>)
 80007aa:	f043 0302 	orr.w	r3, r3, #2
 80007ae:	6113      	str	r3, [r2, #16]
	GPIOA->BRR |= (1<<1);				//将第1位(bit)设置为0，设置为低电平，GPIO_ResetBits
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <LED_init+0x4c>)
 80007b2:	695b      	ldr	r3, [r3, #20]
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <LED_init+0x4c>)
 80007b6:	f043 0302 	orr.w	r3, r3, #2
 80007ba:	6153      	str	r3, [r2, #20]
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40010800 	.word	0x40010800

080007cc <main>:
u8 len;
u16 times=0;
u8 string[10]="Received: ";

int main(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	Stm32_Clock_Init(9); //系统时钟设置
 80007d0:	2009      	movs	r0, #9
 80007d2:	f000 f91b 	bl	8000a0c <Stm32_Clock_Init>
	delay_init(72);	     //延时初始化
 80007d6:	2048      	movs	r0, #72	; 0x48
 80007d8:	f7ff ff48 	bl	800066c <delay_init>
	LED_init();
 80007dc:	f7ff ffce 	bl	800077c <LED_init>
	USART1_Init(72,115200);	 //串口初始化为9600
 80007e0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80007e4:	2048      	movs	r0, #72	; 0x48
 80007e6:	f000 f9fb 	bl	8000be0 <USART1_Init>
	for(;;)
	{
//	 blink_0();
//	 blink_1();
//	 blink_2();
	   if (USART1_STA & 0x8000) {	//表示成功接收到数据
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <main+0x5c>)
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	da0e      	bge.n	8000812 <main+0x46>
			USART1_SendData(string, 10);
 80007f4:	210a      	movs	r1, #10
 80007f6:	480d      	ldr	r0, [pc, #52]	; (800082c <main+0x60>)
 80007f8:	f000 f9c2 	bl	8000b80 <USART1_SendData>
			USART1_SendData(USART1_REC, USART_REC_LEN);
 80007fc:	21c8      	movs	r1, #200	; 0xc8
 80007fe:	480c      	ldr	r0, [pc, #48]	; (8000830 <main+0x64>)
 8000800:	f000 f9be 	bl	8000b80 <USART1_SendData>
			USART1_STA &= ~0x8000;
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <main+0x5c>)
 8000806:	881b      	ldrh	r3, [r3, #0]
 8000808:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800080c:	b29a      	uxth	r2, r3
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <main+0x5c>)
 8000810:	801a      	strh	r2, [r3, #0]
		}

	   if(KEY_Scan(0)==2)
 8000812:	2000      	movs	r0, #0
 8000814:	f7ff ff82 	bl	800071c <KEY_Scan>
 8000818:	4603      	mov	r3, r0
 800081a:	2b02      	cmp	r3, #2
 800081c:	d1e5      	bne.n	80007ea <main+0x1e>
			GPIO_SetBits(GPIOA,GPIO_Pin_1);		//GPIOA1置低电平
 800081e:	2102      	movs	r1, #2
 8000820:	4804      	ldr	r0, [pc, #16]	; (8000834 <main+0x68>)
 8000822:	f000 f80f 	bl	8000844 <GPIO_SetBits>
	   if (USART1_STA & 0x8000) {	//表示成功接收到数据
 8000826:	e7e0      	b.n	80007ea <main+0x1e>
 8000828:	200000f8 	.word	0x200000f8
 800082c:	20000004 	.word	0x20000004
 8000830:	20000030 	.word	0x20000030
 8000834:	40010800 	.word	0x40010800

08000838 <SystemInit>:
//	   delay_ms(1);
	}
}


void SystemInit(){}
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <GPIO_SetBits>:
#include"stm32f10x_gpio.h"

void GPIO_SetBits(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	807b      	strh	r3, [r7, #2]
    GPIOx->BSRR |= GPIO_Pin;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	691a      	ldr	r2, [r3, #16]
 8000854:	887b      	ldrh	r3, [r7, #2]
 8000856:	431a      	orrs	r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	611a      	str	r2, [r3, #16]
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
	...

08000868 <MY_NVIC_SetVectorTable>:
#include "sys.h" 
#include"stm32f10x.h"


void MY_NVIC_SetVectorTable(u32 NVIC_VectTab, u32 Offset)	 
{ 	   	 
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
	SCB->VTOR = NVIC_VectTab|(Offset & (u32)0x1FFFFF80);
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8000878:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800087c:	4904      	ldr	r1, [pc, #16]	; (8000890 <MY_NVIC_SetVectorTable+0x28>)
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	4313      	orrs	r3, r2
 8000882:	608b      	str	r3, [r1, #8]
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <MY_NVIC_PriorityGroupConfig>:

void MY_NVIC_PriorityGroupConfig(u8 NVIC_Group)	 
{ 
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
	u32 temp,temp1;	  
	temp1=(~NVIC_Group)&0x07;
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	43db      	mvns	r3, r3
 80008a2:	f003 0307 	and.w	r3, r3, #7
 80008a6:	60fb      	str	r3, [r7, #12]
	temp1<<=8;
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	021b      	lsls	r3, r3, #8
 80008ac:	60fb      	str	r3, [r7, #12]
	temp=SCB->AIRCR;
 80008ae:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <MY_NVIC_PriorityGroupConfig+0x50>)
 80008b0:	68db      	ldr	r3, [r3, #12]
 80008b2:	60bb      	str	r3, [r7, #8]
	temp&=0X0000F8FF;
 80008b4:	68ba      	ldr	r2, [r7, #8]
 80008b6:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008ba:	4013      	ands	r3, r2
 80008bc:	60bb      	str	r3, [r7, #8]
	temp|=0X05FA0000;
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c8:	60bb      	str	r3, [r7, #8]
	temp|=temp1;	   
 80008ca:	68ba      	ldr	r2, [r7, #8]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	60bb      	str	r3, [r7, #8]
	SCB->AIRCR=temp;
 80008d2:	4a04      	ldr	r2, [pc, #16]	; (80008e4 <MY_NVIC_PriorityGroupConfig+0x50>)
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	60d3      	str	r3, [r2, #12]
}
 80008d8:	bf00      	nop
 80008da:	3714      	adds	r7, #20
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <MY_NVIC_Init>:

void MY_NVIC_Init(uint8_t NVIC_PreemptionPriority,uint8_t NVIC_SubPriority,uint8_t NVIC_Channel,uint8_t NVIC_Group)	 
{ 
 80008e8:	b590      	push	{r4, r7, lr}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4604      	mov	r4, r0
 80008f0:	4608      	mov	r0, r1
 80008f2:	4611      	mov	r1, r2
 80008f4:	461a      	mov	r2, r3
 80008f6:	4623      	mov	r3, r4
 80008f8:	71fb      	strb	r3, [r7, #7]
 80008fa:	4603      	mov	r3, r0
 80008fc:	71bb      	strb	r3, [r7, #6]
 80008fe:	460b      	mov	r3, r1
 8000900:	717b      	strb	r3, [r7, #5]
 8000902:	4613      	mov	r3, r2
 8000904:	713b      	strb	r3, [r7, #4]
	u32 temp;
	MY_NVIC_PriorityGroupConfig(NVIC_Group);
 8000906:	793b      	ldrb	r3, [r7, #4]
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ffc3 	bl	8000894 <MY_NVIC_PriorityGroupConfig>
	temp=NVIC_PreemptionPriority<<(4-NVIC_Group);	  
 800090e:	79fa      	ldrb	r2, [r7, #7]
 8000910:	793b      	ldrb	r3, [r7, #4]
 8000912:	f1c3 0304 	rsb	r3, r3, #4
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	60fb      	str	r3, [r7, #12]
	temp|=NVIC_SubPriority&(0x0f>>NVIC_Group);
 800091c:	79ba      	ldrb	r2, [r7, #6]
 800091e:	793b      	ldrb	r3, [r7, #4]
 8000920:	210f      	movs	r1, #15
 8000922:	fa41 f303 	asr.w	r3, r1, r3
 8000926:	4013      	ands	r3, r2
 8000928:	461a      	mov	r2, r3
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	4313      	orrs	r3, r2
 800092e:	60fb      	str	r3, [r7, #12]
	temp&=0xf;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	f003 030f 	and.w	r3, r3, #15
 8000936:	60fb      	str	r3, [r7, #12]
	NVIC->ISER[NVIC_Channel/32]|=(1<<NVIC_Channel%32);
 8000938:	4a13      	ldr	r2, [pc, #76]	; (8000988 <MY_NVIC_Init+0xa0>)
 800093a:	797b      	ldrb	r3, [r7, #5]
 800093c:	095b      	lsrs	r3, r3, #5
 800093e:	b2d8      	uxtb	r0, r3
 8000940:	4603      	mov	r3, r0
 8000942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000946:	797a      	ldrb	r2, [r7, #5]
 8000948:	f002 021f 	and.w	r2, r2, #31
 800094c:	2101      	movs	r1, #1
 800094e:	fa01 f202 	lsl.w	r2, r1, r2
 8000952:	4614      	mov	r4, r2
 8000954:	4a0c      	ldr	r2, [pc, #48]	; (8000988 <MY_NVIC_Init+0xa0>)
 8000956:	4601      	mov	r1, r0
 8000958:	4323      	orrs	r3, r4
 800095a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	NVIC->IP[NVIC_Channel]|=temp<<4;
 800095e:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <MY_NVIC_Init+0xa0>)
 8000960:	797b      	ldrb	r3, [r7, #5]
 8000962:	4413      	add	r3, r2
 8000964:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8000968:	b2d9      	uxtb	r1, r3
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	b2db      	uxtb	r3, r3
 800096e:	011b      	lsls	r3, r3, #4
 8000970:	b2da      	uxtb	r2, r3
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MY_NVIC_Init+0xa0>)
 8000974:	797b      	ldrb	r3, [r7, #5]
 8000976:	430a      	orrs	r2, r1
 8000978:	b2d2      	uxtb	r2, r2
 800097a:	4403      	add	r3, r0
 800097c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
} 
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	bd90      	pop	{r4, r7, pc}
 8000988:	e000e100 	.word	0xe000e100

0800098c <MYRCC_DeInit>:

void MYRCC_DeInit(void)
{	
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
 	RCC->APB1RSTR = 0x00000000;
 8000990:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <MYRCC_DeInit+0x78>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
	RCC->APB2RSTR = 0x00000000; 
 8000996:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <MYRCC_DeInit+0x78>)
 8000998:	2200      	movs	r2, #0
 800099a:	60da      	str	r2, [r3, #12]
	  
  	RCC->AHBENR = 0x00000014;
 800099c:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <MYRCC_DeInit+0x78>)
 800099e:	2214      	movs	r2, #20
 80009a0:	615a      	str	r2, [r3, #20]
  	RCC->APB2ENR = 0x00000000;
 80009a2:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <MYRCC_DeInit+0x78>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  	RCC->APB1ENR = 0x00000000;   
 80009a8:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <MYRCC_DeInit+0x78>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
	RCC->CR |= 0x00000001;
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <MYRCC_DeInit+0x78>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a14      	ldr	r2, [pc, #80]	; (8000a04 <MYRCC_DeInit+0x78>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6013      	str	r3, [r2, #0]
	RCC->CFGR &= 0xF8FF0000;
 80009ba:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <MYRCC_DeInit+0x78>)
 80009bc:	685a      	ldr	r2, [r3, #4]
 80009be:	4911      	ldr	r1, [pc, #68]	; (8000a04 <MYRCC_DeInit+0x78>)
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MYRCC_DeInit+0x7c>)
 80009c2:	4013      	ands	r3, r2
 80009c4:	604b      	str	r3, [r1, #4]
	RCC->CR &= 0xFEF6FFFF;
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <MYRCC_DeInit+0x78>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a0e      	ldr	r2, [pc, #56]	; (8000a04 <MYRCC_DeInit+0x78>)
 80009cc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80009d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009d4:	6013      	str	r3, [r2, #0]
	RCC->CR &= 0xFFFBFFFF;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <MYRCC_DeInit+0x78>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <MYRCC_DeInit+0x78>)
 80009dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009e0:	6013      	str	r3, [r2, #0]
	RCC->CFGR &= 0xFF80FFFF;
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <MYRCC_DeInit+0x78>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <MYRCC_DeInit+0x78>)
 80009e8:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80009ec:	6053      	str	r3, [r2, #4]
	RCC->CIR = 0x00000000;
 80009ee:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <MYRCC_DeInit+0x78>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
#ifdef  VECT_TAB_RAM
	MY_NVIC_SetVectorTable(0x20000000, 0x0);
#else   
	MY_NVIC_SetVectorTable(0x08000000,0x0);
 80009f4:	2100      	movs	r1, #0
 80009f6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80009fa:	f7ff ff35 	bl	8000868 <MY_NVIC_SetVectorTable>
#endif
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40021000 	.word	0x40021000
 8000a08:	f8ff0000 	.word	0xf8ff0000

08000a0c <Stm32_Clock_Init>:

void Stm32_Clock_Init(u8 PLL)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
	unsigned char temp=0;   
 8000a16:	2300      	movs	r3, #0
 8000a18:	73fb      	strb	r3, [r7, #15]
	MYRCC_DeInit();
 8000a1a:	f7ff ffb7 	bl	800098c <MYRCC_DeInit>
 	RCC->CR|=0x00010000;
 8000a1e:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <Stm32_Clock_Init+0xa8>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a24      	ldr	r2, [pc, #144]	; (8000ab4 <Stm32_Clock_Init+0xa8>)
 8000a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a28:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR>>17));
 8000a2a:	bf00      	nop
 8000a2c:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <Stm32_Clock_Init+0xa8>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	0c5b      	lsrs	r3, r3, #17
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d0fa      	beq.n	8000a2c <Stm32_Clock_Init+0x20>
	RCC->CFGR=0X00000400;
 8000a36:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <Stm32_Clock_Init+0xa8>)
 8000a38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a3c:	605a      	str	r2, [r3, #4]
	PLL-=2;
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	3b02      	subs	r3, #2
 8000a42:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR|=PLL<<18;
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <Stm32_Clock_Init+0xa8>)
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	79fa      	ldrb	r2, [r7, #7]
 8000a4a:	0492      	lsls	r2, r2, #18
 8000a4c:	4611      	mov	r1, r2
 8000a4e:	4a19      	ldr	r2, [pc, #100]	; (8000ab4 <Stm32_Clock_Init+0xa8>)
 8000a50:	430b      	orrs	r3, r1
 8000a52:	6053      	str	r3, [r2, #4]
	RCC->CFGR|=1<<16;
 8000a54:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <Stm32_Clock_Init+0xa8>)
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	4a16      	ldr	r2, [pc, #88]	; (8000ab4 <Stm32_Clock_Init+0xa8>)
 8000a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a5e:	6053      	str	r3, [r2, #4]
	FLASH->ACR|=0x32;
 8000a60:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <Stm32_Clock_Init+0xac>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <Stm32_Clock_Init+0xac>)
 8000a66:	f043 0332 	orr.w	r3, r3, #50	; 0x32
 8000a6a:	6013      	str	r3, [r2, #0]
	RCC->CR|=0x01000000;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <Stm32_Clock_Init+0xa8>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a10      	ldr	r2, [pc, #64]	; (8000ab4 <Stm32_Clock_Init+0xa8>)
 8000a72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a76:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR>>25));
 8000a78:	bf00      	nop
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <Stm32_Clock_Init+0xa8>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	0e5b      	lsrs	r3, r3, #25
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d0fa      	beq.n	8000a7a <Stm32_Clock_Init+0x6e>
	RCC->CFGR|=0x00000002;
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <Stm32_Clock_Init+0xa8>)
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <Stm32_Clock_Init+0xa8>)
 8000a8a:	f043 0302 	orr.w	r3, r3, #2
 8000a8e:	6053      	str	r3, [r2, #4]
	while(temp!=0x02)
 8000a90:	e007      	b.n	8000aa2 <Stm32_Clock_Init+0x96>
	{   
		temp=RCC->CFGR>>2;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <Stm32_Clock_Init+0xa8>)
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	089b      	lsrs	r3, r3, #2
 8000a98:	73fb      	strb	r3, [r7, #15]
		temp&=0x03;
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
 8000a9c:	f003 0303 	and.w	r3, r3, #3
 8000aa0:	73fb      	strb	r3, [r7, #15]
	while(temp!=0x02)
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
 8000aa4:	2b02      	cmp	r3, #2
 8000aa6:	d1f4      	bne.n	8000a92 <Stm32_Clock_Init+0x86>
	}    
}		
 8000aa8:	bf00      	nop
 8000aaa:	bf00      	nop
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40022000 	.word	0x40022000

08000abc <USART1_IRQHandler>:
//USART1_STA[15] 标识是否接收完成状态位，1：标识接收完成；0：未接收完成；
//USART1_STA[14] 标识是否为第一个数据，1：非第一个数据；0：表示第一个数据；
//USART1_STA[13:0] 标识有效的数据接收长度
u16 USART1_STA = 0;

void USART1_IRQHandler(void) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
	u8 buf = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	71fb      	strb	r3, [r7, #7]
	if (USART1->SR & 0x20) {	//当接收中断产生
 8000ac6:	4b2b      	ldr	r3, [pc, #172]	; (8000b74 <USART1_IRQHandler+0xb8>)
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	f003 0320 	and.w	r3, r3, #32
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d028      	beq.n	8000b26 <USART1_IRQHandler+0x6a>

		if (!(USART1_STA & 0x4000)) {	//第一个数据
 8000ad4:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <USART1_IRQHandler+0xbc>)
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d108      	bne.n	8000af2 <USART1_IRQHandler+0x36>
			USART1_STA = 0x4000;	//表示下次接收，就不再是第一个数据，清除掉了数据接收长度
 8000ae0:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <USART1_IRQHandler+0xbc>)
 8000ae2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ae6:	801a      	strh	r2, [r3, #0]
			memset(USART1_REC, 0, USART_REC_LEN);
 8000ae8:	22c8      	movs	r2, #200	; 0xc8
 8000aea:	2100      	movs	r1, #0
 8000aec:	4823      	ldr	r0, [pc, #140]	; (8000b7c <USART1_IRQHandler+0xc0>)
 8000aee:	f000 f979 	bl	8000de4 <memset>
		}

		buf = USART1->DR;
 8000af2:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <USART1_IRQHandler+0xb8>)
 8000af4:	889b      	ldrh	r3, [r3, #4]
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	71fb      	strb	r3, [r7, #7]
		USART1_REC[USART1_STA & 0x3FFF] = buf;
 8000afa:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <USART1_IRQHandler+0xbc>)
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000b02:	491e      	ldr	r1, [pc, #120]	; (8000b7c <USART1_IRQHandler+0xc0>)
 8000b04:	79fa      	ldrb	r2, [r7, #7]
 8000b06:	54ca      	strb	r2, [r1, r3]
		USART1_STA++;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <USART1_IRQHandler+0xbc>)
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <USART1_IRQHandler+0xbc>)
 8000b12:	801a      	strh	r2, [r3, #0]

		if ((USART1_STA & 0x3FFF) >= USART_REC_LEN) {	//达到将要满载状态
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <USART1_IRQHandler+0xbc>)
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000b1c:	2bc7      	cmp	r3, #199	; 0xc7
 8000b1e:	dd02      	ble.n	8000b26 <USART1_IRQHandler+0x6a>
			USART1_STA = 0;	//覆盖原本数据
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <USART1_IRQHandler+0xbc>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	801a      	strh	r2, [r3, #0]
		}
	}

	if (USART1->SR & 0x10) {	//总线空闲
 8000b26:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <USART1_IRQHandler+0xb8>)
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	f003 0310 	and.w	r3, r3, #16
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d01a      	beq.n	8000b6a <USART1_IRQHandler+0xae>
		USART1_STA |= 0x8000;	//标识接收成功
 8000b34:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <USART1_IRQHandler+0xbc>)
 8000b36:	881b      	ldrh	r3, [r3, #0]
 8000b38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000b3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <USART1_IRQHandler+0xbc>)
 8000b44:	801a      	strh	r2, [r3, #0]
		USART1_STA &= ~0x4000;	//清除14位
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <USART1_IRQHandler+0xbc>)
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <USART1_IRQHandler+0xbc>)
 8000b52:	801a      	strh	r2, [r3, #0]
		USART1_REC[USART1_STA & 0x3FFF] = '\0';	//保证有效字符串
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <USART1_IRQHandler+0xbc>)
 8000b56:	881b      	ldrh	r3, [r3, #0]
 8000b58:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000b5c:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <USART1_IRQHandler+0xc0>)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	54d1      	strb	r1, [r2, r3]
		buf = USART1->DR;	//清空状态
 8000b62:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <USART1_IRQHandler+0xb8>)
 8000b64:	889b      	ldrh	r3, [r3, #4]
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	71fb      	strb	r3, [r7, #7]
	}

}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40013800 	.word	0x40013800
 8000b78:	200000f8 	.word	0x200000f8
 8000b7c:	20000030 	.word	0x20000030

08000b80 <USART1_SendData>:
#endif										 

void USART1_SendData(u8 *data, u8 len) {
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	70fb      	strb	r3, [r7, #3]
	u8 i = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	73fb      	strb	r3, [r7, #15]

	for (i = 0; i < len; i++) {
 8000b90:	2300      	movs	r3, #0
 8000b92:	73fb      	strb	r3, [r7, #15]
 8000b94:	e017      	b.n	8000bc6 <USART1_SendData+0x46>
		if (*(data + i) == '\0')	//空白符号无需发送
 8000b96:	7bfb      	ldrb	r3, [r7, #15]
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d016      	beq.n	8000bd0 <USART1_SendData+0x50>
			return;
		//判断是否允许发送数据
		while ((USART1->SR & 0x40) == 0);
 8000ba2:	bf00      	nop
 8000ba4:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <USART1_SendData+0x5c>)
 8000ba6:	881b      	ldrh	r3, [r3, #0]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d0f8      	beq.n	8000ba4 <USART1_SendData+0x24>
		USART1->DR = *(data + i);	//等效于下面的函数
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	781a      	ldrb	r2, [r3, #0]
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <USART1_SendData+0x5c>)
 8000bbc:	b292      	uxth	r2, r2
 8000bbe:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < len; i++) {
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	73fb      	strb	r3, [r7, #15]
 8000bc6:	7bfa      	ldrb	r2, [r7, #15]
 8000bc8:	78fb      	ldrb	r3, [r7, #3]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d3e3      	bcc.n	8000b96 <USART1_SendData+0x16>
 8000bce:	e000      	b.n	8000bd2 <USART1_SendData+0x52>
			return;
 8000bd0:	bf00      	nop
//		USART_SendData(USART1, *(data + i));
	}
}
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	40013800 	.word	0x40013800

08000be0 <USART1_Init>:
//#endif
//}


void USART1_Init (uint32_t pclk2,uint32_t bound)
{
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
	float temp;
	u16 mantissa;
	u16 fraction;
	temp=(float)(pclk2*1000000)/(bound*16);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a52      	ldr	r2, [pc, #328]	; (8000d38 <USART1_Init+0x158>)
 8000bee:	fb02 f303 	mul.w	r3, r2, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fb72 	bl	80002dc <__aeabi_ui2f>
 8000bf8:	4604      	mov	r4, r0
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	011b      	lsls	r3, r3, #4
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fb6c 	bl	80002dc <__aeabi_ui2f>
 8000c04:	4603      	mov	r3, r0
 8000c06:	4619      	mov	r1, r3
 8000c08:	4620      	mov	r0, r4
 8000c0a:	f7ff fc73 	bl	80004f4 <__aeabi_fdiv>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	60fb      	str	r3, [r7, #12]
	mantissa=temp;
 8000c12:	68f8      	ldr	r0, [r7, #12]
 8000c14:	f7ff fd0a 	bl	800062c <__aeabi_f2uiz>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	817b      	strh	r3, [r7, #10]
	fraction=(temp-mantissa)*16;
 8000c1c:	897b      	ldrh	r3, [r7, #10]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fb60 	bl	80002e4 <__aeabi_i2f>
 8000c24:	4603      	mov	r3, r0
 8000c26:	4619      	mov	r1, r3
 8000c28:	68f8      	ldr	r0, [r7, #12]
 8000c2a:	f7ff faa5 	bl	8000178 <__aeabi_fsub>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fba9 	bl	800038c <__aeabi_fmul>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fcf5 	bl	800062c <__aeabi_f2uiz>
 8000c42:	4603      	mov	r3, r0
 8000c44:	813b      	strh	r3, [r7, #8]
	mantissa<<=4;
 8000c46:	897b      	ldrh	r3, [r7, #10]
 8000c48:	011b      	lsls	r3, r3, #4
 8000c4a:	817b      	strh	r3, [r7, #10]
	mantissa+=fraction;
 8000c4c:	897a      	ldrh	r2, [r7, #10]
 8000c4e:	893b      	ldrh	r3, [r7, #8]
 8000c50:	4413      	add	r3, r2
 8000c52:	817b      	strh	r3, [r7, #10]
    //1.使能时钟
	RCC->APB2ENR |= 1 << 2;	//GPIOA 时钟使能
 8000c54:	4b39      	ldr	r3, [pc, #228]	; (8000d3c <USART1_Init+0x15c>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	4a38      	ldr	r2, [pc, #224]	; (8000d3c <USART1_Init+0x15c>)
 8000c5a:	f043 0304 	orr.w	r3, r3, #4
 8000c5e:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= 1 << 14;	//USART1 时钟使能
 8000c60:	4b36      	ldr	r3, [pc, #216]	; (8000d3c <USART1_Init+0x15c>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	4a35      	ldr	r2, [pc, #212]	; (8000d3c <USART1_Init+0x15c>)
 8000c66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6a:	6193      	str	r3, [r2, #24]

	//2.初始化GPIO
	GPIOA->CRH &= ~(0x0F << 4);
 8000c6c:	4b34      	ldr	r3, [pc, #208]	; (8000d40 <USART1_Init+0x160>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	4a33      	ldr	r2, [pc, #204]	; (8000d40 <USART1_Init+0x160>)
 8000c72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c76:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= 0x0B << 4;	//设置GPIOA.9 -> 50MHz，复用推挽
 8000c78:	4b31      	ldr	r3, [pc, #196]	; (8000d40 <USART1_Init+0x160>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	4a30      	ldr	r2, [pc, #192]	; (8000d40 <USART1_Init+0x160>)
 8000c7e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8000c82:	6053      	str	r3, [r2, #4]

	GPIOA->CRH &= ~(0x0F << 8);
 8000c84:	4b2e      	ldr	r3, [pc, #184]	; (8000d40 <USART1_Init+0x160>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	4a2d      	ldr	r2, [pc, #180]	; (8000d40 <USART1_Init+0x160>)
 8000c8a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000c8e:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= 0x04 << 8;	//设置GPIOA.10 -> 浮空输入模式
 8000c90:	4b2b      	ldr	r3, [pc, #172]	; (8000d40 <USART1_Init+0x160>)
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	4a2a      	ldr	r2, [pc, #168]	; (8000d40 <USART1_Init+0x160>)
 8000c96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c9a:	6053      	str	r3, [r2, #4]

	//3.初始化USART1
	//3.1 设置波特率
	USART1->BRR = mantissa ;//0x1D4 << 4 | 0x4B;//设置波特率9600
 8000c9c:	4a29      	ldr	r2, [pc, #164]	; (8000d44 <USART1_Init+0x164>)
 8000c9e:	897b      	ldrh	r3, [r7, #10]
 8000ca0:	8113      	strh	r3, [r2, #8]
	//3.2 设置校验位
	USART1->CR1 &= ~(1 << 10);			//不使用校验位
 8000ca2:	4b28      	ldr	r3, [pc, #160]	; (8000d44 <USART1_Init+0x164>)
 8000ca4:	899b      	ldrh	r3, [r3, #12]
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	4a26      	ldr	r2, [pc, #152]	; (8000d44 <USART1_Init+0x164>)
 8000caa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	8193      	strh	r3, [r2, #12]
	//3.3 数据位
	USART1->CR1 &= ~(1 << 12);			//8位长度
 8000cb2:	4b24      	ldr	r3, [pc, #144]	; (8000d44 <USART1_Init+0x164>)
 8000cb4:	899b      	ldrh	r3, [r3, #12]
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	4a22      	ldr	r2, [pc, #136]	; (8000d44 <USART1_Init+0x164>)
 8000cba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	8193      	strh	r3, [r2, #12]
	//3.4 停止位
	USART1->CR2 &= ~(0x02 << 12);			//1个停止位
 8000cc2:	4b20      	ldr	r3, [pc, #128]	; (8000d44 <USART1_Init+0x164>)
 8000cc4:	8a1b      	ldrh	r3, [r3, #16]
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	4a1e      	ldr	r2, [pc, #120]	; (8000d44 <USART1_Init+0x164>)
 8000cca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	8213      	strh	r3, [r2, #16]
	//4.使能
	USART1->CR1 |= 1 << 3;			//使能TX
 8000cd2:	4b1c      	ldr	r3, [pc, #112]	; (8000d44 <USART1_Init+0x164>)
 8000cd4:	899b      	ldrh	r3, [r3, #12]
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	4a1a      	ldr	r2, [pc, #104]	; (8000d44 <USART1_Init+0x164>)
 8000cda:	f043 0308 	orr.w	r3, r3, #8
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	8193      	strh	r3, [r2, #12]
	USART1->CR1 |= 1 << 2;			//使能RX
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <USART1_Init+0x164>)
 8000ce4:	899b      	ldrh	r3, [r3, #12]
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	4a16      	ldr	r2, [pc, #88]	; (8000d44 <USART1_Init+0x164>)
 8000cea:	f043 0304 	orr.w	r3, r3, #4
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	8193      	strh	r3, [r2, #12]
	USART1->CR1 |= 1 << 13;			//使能USART1
 8000cf2:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <USART1_Init+0x164>)
 8000cf4:	899b      	ldrh	r3, [r3, #12]
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <USART1_Init+0x164>)
 8000cfa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	8193      	strh	r3, [r2, #12]

	//配置数据接收时候，需要用到中断
	//5.配置NVIC
	//5.1 先分组
	MY_NVIC_Init(3,3,USART1_IRQn,2);
 8000d02:	2302      	movs	r3, #2
 8000d04:	2225      	movs	r2, #37	; 0x25
 8000d06:	2103      	movs	r1, #3
 8000d08:	2003      	movs	r0, #3
 8000d0a:	f7ff fded 	bl	80008e8 <MY_NVIC_Init>

	//6 使能接受数据中断寄存器
	USART1->CR1 |= 1 << 5;
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <USART1_Init+0x164>)
 8000d10:	899b      	ldrh	r3, [r3, #12]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <USART1_Init+0x164>)
 8000d16:	f043 0320 	orr.w	r3, r3, #32
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	8193      	strh	r3, [r2, #12]
	USART1->CR1 |= 1 << 4;			//开启IDLE中断
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <USART1_Init+0x164>)
 8000d20:	899b      	ldrh	r3, [r3, #12]
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <USART1_Init+0x164>)
 8000d26:	f043 0310 	orr.w	r3, r3, #16
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	8193      	strh	r3, [r2, #12]
}
 8000d2e:	bf00      	nop
 8000d30:	3714      	adds	r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd90      	pop	{r4, r7, pc}
 8000d36:	bf00      	nop
 8000d38:	000f4240 	.word	0x000f4240
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40010800 	.word	0x40010800
 8000d44:	40013800 	.word	0x40013800

08000d48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d48:	480d      	ldr	r0, [pc, #52]	; (8000d80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d4a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d4c:	f7ff fd74 	bl	8000838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d50:	480c      	ldr	r0, [pc, #48]	; (8000d84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d52:	490d      	ldr	r1, [pc, #52]	; (8000d88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d54:	4a0d      	ldr	r2, [pc, #52]	; (8000d8c <LoopForever+0xe>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d58:	e002      	b.n	8000d60 <LoopCopyDataInit>

08000d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5e:	3304      	adds	r3, #4

08000d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d64:	d3f9      	bcc.n	8000d5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d66:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d68:	4c0a      	ldr	r4, [pc, #40]	; (8000d94 <LoopForever+0x16>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d6c:	e001      	b.n	8000d72 <LoopFillZerobss>

08000d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d70:	3204      	adds	r2, #4

08000d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d74:	d3fb      	bcc.n	8000d6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d76:	f000 f811 	bl	8000d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d7a:	f7ff fd27 	bl	80007cc <main>

08000d7e <LoopForever>:

LoopForever:
    b LoopForever
 8000d7e:	e7fe      	b.n	8000d7e <LoopForever>
  ldr   r0, =_estack
 8000d80:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d88:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d8c:	08000e14 	.word	0x08000e14
  ldr r2, =_sbss
 8000d90:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d94:	200000fc 	.word	0x200000fc

08000d98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d98:	e7fe      	b.n	8000d98 <ADC1_2_IRQHandler>
	...

08000d9c <__libc_init_array>:
 8000d9c:	b570      	push	{r4, r5, r6, lr}
 8000d9e:	2600      	movs	r6, #0
 8000da0:	4d0c      	ldr	r5, [pc, #48]	; (8000dd4 <__libc_init_array+0x38>)
 8000da2:	4c0d      	ldr	r4, [pc, #52]	; (8000dd8 <__libc_init_array+0x3c>)
 8000da4:	1b64      	subs	r4, r4, r5
 8000da6:	10a4      	asrs	r4, r4, #2
 8000da8:	42a6      	cmp	r6, r4
 8000daa:	d109      	bne.n	8000dc0 <__libc_init_array+0x24>
 8000dac:	f000 f822 	bl	8000df4 <_init>
 8000db0:	2600      	movs	r6, #0
 8000db2:	4d0a      	ldr	r5, [pc, #40]	; (8000ddc <__libc_init_array+0x40>)
 8000db4:	4c0a      	ldr	r4, [pc, #40]	; (8000de0 <__libc_init_array+0x44>)
 8000db6:	1b64      	subs	r4, r4, r5
 8000db8:	10a4      	asrs	r4, r4, #2
 8000dba:	42a6      	cmp	r6, r4
 8000dbc:	d105      	bne.n	8000dca <__libc_init_array+0x2e>
 8000dbe:	bd70      	pop	{r4, r5, r6, pc}
 8000dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dc4:	4798      	blx	r3
 8000dc6:	3601      	adds	r6, #1
 8000dc8:	e7ee      	b.n	8000da8 <__libc_init_array+0xc>
 8000dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dce:	4798      	blx	r3
 8000dd0:	3601      	adds	r6, #1
 8000dd2:	e7f2      	b.n	8000dba <__libc_init_array+0x1e>
 8000dd4:	08000e0c 	.word	0x08000e0c
 8000dd8:	08000e0c 	.word	0x08000e0c
 8000ddc:	08000e0c 	.word	0x08000e0c
 8000de0:	08000e10 	.word	0x08000e10

08000de4 <memset>:
 8000de4:	4603      	mov	r3, r0
 8000de6:	4402      	add	r2, r0
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d100      	bne.n	8000dee <memset+0xa>
 8000dec:	4770      	bx	lr
 8000dee:	f803 1b01 	strb.w	r1, [r3], #1
 8000df2:	e7f9      	b.n	8000de8 <memset+0x4>

08000df4 <_init>:
 8000df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000df6:	bf00      	nop
 8000df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dfa:	bc08      	pop	{r3}
 8000dfc:	469e      	mov	lr, r3
 8000dfe:	4770      	bx	lr

08000e00 <_fini>:
 8000e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e02:	bf00      	nop
 8000e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e06:	bc08      	pop	{r3}
 8000e08:	469e      	mov	lr, r3
 8000e0a:	4770      	bx	lr
